"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const debugInit = require("debug");
const uuid_1 = require("uuid");
const debug = debugInit('sapi:Injectable');
exports.injectableSymbols = {
    id: Symbol('injectableId'),
    isSakuraApiInjectable: Symbol('isSakuraApiInjectable'),
    sapi: Symbol('sapi')
};
class NonInjectableConstructorParameterError extends Error {
    constructor(target, source) {
        const targetName = (target || {}).name
            || ((target || {}).constructor || {}).name
            || typeof target;
        const sourceName = (source || {}).name
            || ((source || {}).constructor || {}).name
            || typeof source;
        const message = `Unable to inject ${targetName} into ${sourceName}. Only classes decorated with '@Injectable' can`
            + ` be passed into the ${sourceName} constructor.`;
        super(message);
    }
}
exports.NonInjectableConstructorParameterError = NonInjectableConstructorParameterError;
class ProvidersMustBeDecoratedWithInjectableError extends Error {
    constructor(target) {
        const targetName = (target || {}).name
            || ((target || {}).constructor || {}).name
            || typeof target;
        super(`Invalid attempt to get ${targetName} must be decorated with @Injectable`);
    }
}
exports.ProvidersMustBeDecoratedWithInjectableError = ProvidersMustBeDecoratedWithInjectableError;
class ProviderNotRegistered extends Error {
    constructor(target) {
        const targetName = (target || {}).name
            || ((target || {}).constructor || {}).name
            || typeof target;
        super(`${targetName} is not registered as a provider with SakuraApi`);
    }
}
exports.ProviderNotRegistered = ProviderNotRegistered;
function Injectable() {
    return (target) => {
        const newConstructor = new Proxy(target, {
            construct: (t, args, nt) => {
                const expectedDiArgs = Reflect.getMetadata('design:paramtypes', t);
                const diArgs = getDependencyInjections(target, t, target[exports.injectableSymbols.sapi]);
                const c = Reflect.construct(t, diArgs, nt);
                return c;
            }
        });
        Reflect.defineProperty(newConstructor, exports.injectableSymbols.id, {
            value: uuid_1.v4(),
            writable: false
        });
        Reflect.defineProperty(newConstructor, exports.injectableSymbols.isSakuraApiInjectable, {
            value: true,
            writable: false
        });
        Reflect.defineProperty(newConstructor.prototype, exports.injectableSymbols.isSakuraApiInjectable, {
            value: true,
            writable: false
        });
        Reflect.defineProperty(newConstructor, 'sapi', {
            configurable: false,
            enumerable: false,
            get: () => newConstructor[exports.injectableSymbols.sapi]
        });
        Reflect.defineProperty(newConstructor.prototype, 'sapi', {
            configurable: false,
            enumerable: false,
            get: () => newConstructor[exports.injectableSymbols.sapi]
        });
        Reflect.defineProperty(newConstructor, 'sapiConfig', {
            configurable: false,
            enumerable: false,
            get: () => (newConstructor[exports.injectableSymbols.sapi] || {}).config
        });
        Reflect.defineProperty(newConstructor.prototype, 'sapiConfig', {
            configurable: false,
            enumerable: false,
            get: () => (newConstructor[exports.injectableSymbols.sapi] || {}).config
        });
        newConstructor[exports.injectableSymbols.sapi] = null;
        return newConstructor;
    };
}
exports.Injectable = Injectable;
function getDependencyInjections(target, t, sapi) {
    const expectedDiArgs = Reflect.getMetadata('design:paramtypes', t);
    const diArgs = [];
    for (const arg of expectedDiArgs || []) {
        debug(`injecting ${arg.name} into ${target.name}`);
        const isInjectable = !!arg[exports.injectableSymbols.isSakuraApiInjectable];
        if (typeof arg !== 'function' || !isInjectable) {
            throw new NonInjectableConstructorParameterError(arg, target);
        }
        debug('\t getting provider from sapi');
        diArgs.push(sapi.getProvider(arg));
    }
    return diArgs;
}
exports.getDependencyInjections = getDependencyInjections;
//# sourceMappingURL=injectable.js.map