"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const model_1 = require("./@model/model");
exports.authenticatorPluginSymbols = {
    id: Symbol('id'),
    isAuthenticator: Symbol('isAuthenticator'),
    sapi: Symbol('sapi')
};
class AuthenticatorsMustBeDecoratedWithAuthenticatorPluginError extends Error {
    constructor(target) {
        const targetName = (target || {}).name
            || ((target || {}).constructor || {}).name
            || typeof target;
        super(`Invalid attempt to get ${targetName}, must be decorated with @AuthenticatorPlugin`);
    }
}
exports.AuthenticatorsMustBeDecoratedWithAuthenticatorPluginError = AuthenticatorsMustBeDecoratedWithAuthenticatorPluginError;
class AuthenticatorNotRegistered extends Error {
    constructor(target) {
        const targetName = (target || {}).name
            || ((target || {}).constructor || {}).name
            || typeof target;
        super(`${targetName} is not registered as an Authenticator with SakuraApi`);
    }
}
exports.AuthenticatorNotRegistered = AuthenticatorNotRegistered;
function AuthenticatorPlugin() {
    return (target) => {
        const newConstructor = new Proxy(target, {
            construct: (t, args, nt) => {
                const c = Reflect.construct(t, args, nt);
                c[exports.authenticatorPluginSymbols.id] = uuid_1.v4();
                return c;
            }
        });
        newConstructor[exports.authenticatorPluginSymbols.id] = uuid_1.v4();
        newConstructor[exports.authenticatorPluginSymbols.sapi] = null;
        Reflect.defineProperty(newConstructor.prototype, exports.authenticatorPluginSymbols.isAuthenticator, {
            value: true,
            writable: false
        });
        Reflect.defineProperty(newConstructor, exports.authenticatorPluginSymbols.isAuthenticator, {
            value: true,
            writable: false
        });
        Reflect.defineProperty(newConstructor.prototype, 'sapi', {
            configurable: false,
            enumerable: false,
            get: () => newConstructor[model_1.modelSymbols.sapi]
        });
        Reflect.defineProperty(newConstructor, 'sapiConfig', {
            configurable: false,
            enumerable: false,
            get: () => (newConstructor[model_1.modelSymbols.sapi] || {}).config
        });
        Reflect.defineProperty(newConstructor.prototype, 'sapiConfig', {
            configurable: false,
            enumerable: false,
            get: () => (newConstructor[model_1.modelSymbols.sapi] || {}).config
        });
        return newConstructor;
    };
}
exports.AuthenticatorPlugin = AuthenticatorPlugin;
let Anonymous = class Anonymous {
    authenticate(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            return { data: {}, status: 200, success: true };
        });
    }
};
Anonymous = __decorate([
    AuthenticatorPlugin()
], Anonymous);
exports.Anonymous = Anonymous;
//# sourceMappingURL=plugins.js.map