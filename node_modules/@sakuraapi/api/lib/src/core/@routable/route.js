"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require("debug");
function Route(options) {
    options = options || {};
    options.path = options.path || '';
    options.method = options.method || 'get';
    options.blackList = options.blackList || false;
    const methods = ['get', 'post', 'put', 'delete', 'head'];
    return (target, key, value) => {
        debug('sapi:route')(`@Route decorated '${key}' with options %o`, options);
        if (methods.indexOf(options.method) < 0) {
            throw new Error(`@route(...)${(target.constructor || {}).name}.${key} had its 'method' `
                + `property set to '${options.method}', which is invalid. Valid options are: ${methods.join(', ')}`);
        }
        const f = function (...args) {
            return value.value.apply(this, args);
        };
        if (!options.blackList) {
            options.authenticator = options.authenticator || [];
            if (!Array.isArray(options.authenticator)) {
                options.authenticator = [options.authenticator];
            }
            Reflect.defineMetadata(`after.${key}`, options.after, target);
            Reflect.defineMetadata(`authenticators.${key}`, options.authenticator, target);
            Reflect.defineMetadata(`before.${key}`, options.before, target);
            Reflect.defineMetadata(`function.${key}`, f, target);
            Reflect.defineMetadata(`hasRoute.${key}`, true, target);
            Reflect.defineMetadata(`httpMethod.${key}`, options.method.toLowerCase(), target);
            Reflect.defineMetadata(`path.${key}`, options.path, target);
        }
        return {
            value: f
        };
    };
}
exports.Route = Route;
//# sourceMappingURL=route.js.map