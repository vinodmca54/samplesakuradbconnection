"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const routable_1 = require("../core/@routable/routable");
const http_status_1 = require("../core/helpers/http-status");
const mongo_db_1 = require("../core/security/mongo-db");
const debug = {
    normal: require('debug')('sapi:handlers:basic')
};
function getRouteHandler(req, res, next) {
    const model = res.locals.routable[routable_1.routableSymbols.model]
        ? res.locals.routable[routable_1.routableSymbols.model]()
        : null;
    const id = req.params.id;
    const resLocals = res.locals;
    if (!model) {
        throw new Error(`${(this.constructor || {}).name || this.name} is attempting to use handler 'getRouteHandler',`
            + ` which requires ${(this.constructor || {}).name || this.name} to be bound to a model`);
    }
    let project = null;
    try {
        assignParameters.call(model);
    }
    catch (err) {
        debug.normal(`getRouteHandler threw error: ${err}`);
        return next();
    }
    debug.normal(`getRouteHandler called with id:'%o', field projection: %o`, id, project);
    model
        .getById(id, project)
        .then((result) => {
        const response = (result) ? result.toJson() : null;
        resLocals.status = 200;
        resLocals.data = response;
        next();
    })
        .catch((err) => {
        console.log(err);
        next(err);
    });
    function assignParameters() {
        const allowedFields$Keys = [];
        sanitizedUserInput(res, 'invalid_fields_parameter', () => project = mongo_db_1.SanitizeMongoDB.flattenObj(model.fromJsonToDb(mongo_db_1.SanitizeMongoDB.whiteList$Keys(req.query.fields, allowedFields$Keys))));
    }
}
exports.getRouteHandler = getRouteHandler;
function getAllRouteHandler(req, res, next) {
    const model = res.locals.routable[routable_1.routableSymbols.model]
        ? res.locals.routable[routable_1.routableSymbols.model]()
        : null;
    const resLocals = res.locals;
    if (!model) {
        throw new Error(`${(this.constructor || {}).name || this.name} is attempting to use handler 'getAllRouteHandler',`
            + ` which requires ${(this.constructor || {}).name || this.name} to be bound to a model`);
    }
    const params = {
        filter: null,
        limit: null,
        project: null,
        skip: null
    };
    try {
        assignParameters.call(model);
    }
    catch (err) {
        debug.normal(`getAllRouteHandler threw error: ${err}`);
        return next();
    }
    debug.normal(`.getAllRouteHandler called with params: %o`, params);
    model
        .get(params)
        .then((results) => {
        const response = [];
        for (const result of results) {
            response.push(result.toJson());
        }
        resLocals.send(200, response);
        next();
    })
        .catch((err) => {
        console.log(err);
        next(err);
    });
    function assignParameters() {
        sanitizedUserInput(res, 'invalid_where_parameter', () => params.filter = mongo_db_1.SanitizeMongoDB.flattenObj(model.fromJsonToDb(mongo_db_1.SanitizeMongoDB.remove$where(req.query.where))));
        const allowedFields$Keys = [];
        sanitizedUserInput(res, 'invalid_fields_parameter', () => params.project = mongo_db_1.SanitizeMongoDB.flattenObj(model.fromJsonToDb(mongo_db_1.SanitizeMongoDB.whiteList$Keys(req.query.fields, allowedFields$Keys))));
        if (req.query.skip !== undefined) {
            sanitizedUserInput(res, 'invalid_skip_parameter', () => {
                params.skip = Number.parseInt(req.query.skip);
                if (Number.isNaN(params.skip)) {
                    throw new SyntaxError('Unexpected token');
                }
            });
        }
        if (req.query.limit !== undefined) {
            sanitizedUserInput(res, 'invalid_limit_parameter', () => {
                params.limit = Number.parseInt(req.query.limit);
                if (Number.isNaN(params.limit)) {
                    throw new SyntaxError('Unexpected token');
                }
            });
        }
    }
}
exports.getAllRouteHandler = getAllRouteHandler;
function putRouteHandler(req, res, next) {
    const model = res.locals.routable[routable_1.routableSymbols.model]
        ? res.locals.routable[routable_1.routableSymbols.model]()
        : null;
    const id = req.params.id;
    const resLocals = res.locals;
    if (!model) {
        throw new Error(`${(this.constructor || {}).name || this.name} is attempting to use handler 'putRouteHandler',`
            + ` which requires ${(this.constructor || {}).name || this.name} to be bound to a model`);
    }
    if (!req.body || typeof req.body !== 'object') {
        resLocals
            .send(400, {
            body: req.body,
            error: 'invalid_body'
        });
        return next();
    }
    if (!id) {
        resLocals
            .send(400, {
            body: req.body,
            error: 'invalid_body_missing_id'
        });
        return next();
    }
    const changeSet = model.fromJsonToDb(req.body);
    debug.normal(`.putRouteHandler called with id: '%o' changeSet: %o`, id, changeSet);
    model
        .getById(id)
        .then((obj) => {
        if (!obj) {
            resLocals.status = 404;
            return next();
        }
        obj
            .save(changeSet)
            .then((result) => {
            resLocals
                .send(200, {
                modified: (result.result || {}).nModified
            });
            next();
        });
    })
        .catch((err) => {
        console.log(err);
    });
}
exports.putRouteHandler = putRouteHandler;
function postRouteHandler(req, res, next) {
    const model = res.locals.routable[routable_1.routableSymbols.model]
        ? res.locals.routable[routable_1.routableSymbols.model]()
        : null;
    const resLocals = res.locals;
    if (!model) {
        throw new Error(`${(this.constructor || {}).name || this.name} is attempting to use handler 'postRouteHandler',`
            + ` which requires ${(this.constructor || {}).name || this.name} to be bound to a model`);
    }
    if (!req.body || typeof req.body !== 'object') {
        resLocals
            .send(400, {
            body: req.body,
            error: 'invalid_body'
        });
        return next();
    }
    const obj = model.fromJson(req.body);
    debug.normal(`.postRouteHandler called with obj: %o`, obj);
    obj
        .create()
        .then((result) => {
        resLocals
            .send(200, {
            count: result.insertedCount,
            id: result.insertedId
        });
        next();
    })
        .catch((err) => {
        if (err.name === 'MongoError') {
            switch (err.code) {
                case 11000:
                    err.status = http_status_1.DUPLICATE_RESOURCE;
                    resLocals.send(http_status_1.DUPLICATE_RESOURCE, {
                        error: 'duplicate_resource'
                    });
                    break;
                default:
                    err.status = 500;
                    resLocals.send(500, {
                        error: 'internal_server_error'
                    });
            }
        }
        else {
            err.status = 500;
            resLocals.send(500, {
                error: 'internal_server_error'
            });
        }
        if (err.status === 500) {
            console.log(err);
        }
        next();
    });
}
exports.postRouteHandler = postRouteHandler;
function deleteRouteHandler(req, res, next) {
    const model = res.locals.routable[routable_1.routableSymbols.model]
        ? res.locals.routable[routable_1.routableSymbols.model]()
        : null;
    const resLocals = res.locals;
    const id = req.params.id;
    if (!model) {
        throw new Error(`${(this.constructor || {}).name || this.name} is attempting to use handler 'deleteRouteHandler',`
            + ` which requires ${(this.constructor || {}).name || this.name} to be bound to a model`);
    }
    debug.normal(`.deleteRouteHandler called with id: '%o'`, id);
    model
        .removeById(id)
        .then((result) => {
        resLocals.send(200, {
            n: (result.result || {}).n || 0
        });
        next();
    })
        .catch((err) => {
        err.status = 500;
        resLocals.send(500, {
            error: 'internal_server_error'
        });
        console.log(err);
        next();
    });
}
exports.deleteRouteHandler = deleteRouteHandler;
function sanitizedUserInput(res, errMessage, fn) {
    try {
        fn();
    }
    catch (err) {
        if (err instanceof SyntaxError
            && err.message
            && (err.message.startsWith('Unexpected token') || err.message.startsWith('Unexpected end of JSON input'))) {
            res
                .locals
                .send(400, {
                details: err.message,
                error: errMessage
            }, res);
            err.status = 400;
        }
        else {
            res
                .locals
                .send(500, {
                error: 'internal_server_error'
            }, res);
            err.status = 500;
            console.log(err);
        }
        throw err;
    }
}
//# sourceMappingURL=basic-handlers.js.map