"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const _ = require("lodash");
const sakura_mongo_db_connection_1 = require("../core/sakura-mongo-db-connection");
const debug = {
    normal: require('debug')('sapi:SakuraApiConfig'),
    verbose: require('debug')('sapi:SakuraApiConfig:verbose')
};
class SakuraApiConfig {
    static dataSources(config) {
        config = config || {};
        if (!config.dbConnections) {
            debug.normal(`.dataSources, no config (config: ${!!config},`
                + `config.dbConnections: ${!!(config || {}).dbConnections})`);
            config.dbConnections = [];
        }
        if (!Array.isArray(config.dbConnections)) {
            throw new Error('Invalid dbConnections array. The "dbConnections" object should be an array');
        }
        const dbConns = new sakura_mongo_db_connection_1.SakuraMongoDbConnection();
        debug.normal(`Adding ${config.dbConnections.length} dbConnections.`);
        for (const conn of config.dbConnections) {
            dbConns.addConnection(conn.name, conn.url, conn.mongoClientOptions);
        }
        return dbConns;
    }
    constructor() {
        debug.normal('.constructor');
    }
    dataSources(config = this.config) {
        return SakuraApiConfig.dataSources(config);
    }
    load(path) {
        path = path || process.env.SAKURA_API_CONFIG || 'config/environment.json';
        debug.normal(`.load path: '${path}'`);
        const config = {};
        let baseConfig = {};
        let baseJsConfig = {};
        debug.normal(`loading environment.json`);
        try {
            baseConfig = JSON.parse(fs.readFileSync(path, { encoding: 'utf8' }));
            debug.normal(`loaded environment.json`);
            debug.verbose(baseConfig);
        }
        catch (err) {
            debug.normal(`${err}`);
            handleLoadError(err, path, false);
        }
        const jsPath = changeFileExtension(path, 'js');
        debug.normal(`loading ${jsPath}`);
        try {
            baseJsConfig = require(`${process.cwd()}/${jsPath}`);
            debug.normal(`loaded ${jsPath}`);
            debug.verbose(baseConfig);
        }
        catch (err) {
            debug.normal(`${err}`);
            handleLoadError(err, path, true);
        }
        const env = process.env.NODE_ENV;
        let envConfig = {};
        let envJsConfig = {};
        if (env && env !== '') {
            const pathParts = path.split('/');
            const fileParts = pathParts[pathParts.length - 1].split('.');
            fileParts.splice(fileParts.length - 1, 0, env);
            pathParts[pathParts.length - 1] = fileParts.join('.');
            path = pathParts.join('/');
            debug.normal(`loading ${path}`);
            try {
                envConfig = JSON.parse(fs.readFileSync(path, { encoding: 'utf8' }));
                debug.normal(`loaded ${path}`);
                debug.verbose(envConfig);
            }
            catch (err) {
                debug.normal(`${err}`);
                handleLoadError(err, path, true);
            }
            path = changeFileExtension(path, 'js');
            debug.normal(`loading ${process.cwd()}/${path}`);
            try {
                envJsConfig = require(`${process.cwd()}/${path}`);
                debug.normal(`loaded ${process.cwd()}/${path}`);
                debug.verbose(envJsConfig);
            }
            catch (err) {
                debug.normal(`${err}`);
                handleLoadError(err, path, true);
            }
        }
        _.merge(config, baseConfig, baseJsConfig, envConfig, envJsConfig, process.env);
        this.config = config;
        debug.verbose('.load:\n%O', config);
        return config;
        function changeFileExtension(targetPath, newExtension) {
            const pathParts = targetPath.split('/');
            const fileParts = pathParts[pathParts.length - 1].split('.');
            fileParts[fileParts.length - 1] = newExtension;
            pathParts[pathParts.length - 1] = fileParts.join('.');
            return pathParts.join('/');
        }
        function handleLoadError(err, targetPath, noDefault) {
            if (err.code === 'ENOENT') {
                debug.normal(`.load config file empty, defaulting to {} for path: '${targetPath}'`);
                return;
            }
            else if (err.message.startsWith('Cannot find module')) {
                debug.normal(`.load config file wasn't found, defaulting to {} for path: '${targetPath}'`);
                return;
            }
            else if (err.message === 'Unexpected end of JSON input') {
                const jsonInputErr = new Error(err.message);
                jsonInputErr.code = 'INVALID_JSON_EMPTY';
                jsonInputErr.path = targetPath;
                debug.normal(`.load path: '${targetPath}', error:`, err);
                throw jsonInputErr;
            }
            else if (err.message.startsWith('Unexpected token')) {
                const tokenErr = new Error(err.message);
                tokenErr.code = 'INVALID_JSON_INVALID';
                tokenErr.path = targetPath;
                debug.normal(`.load path: '${targetPath}', error:`, err);
                throw tokenErr;
            }
            else {
                debug.normal(`.load path: '${targetPath}', error:`, err);
                throw err;
            }
        }
    }
}
exports.SakuraApiConfig = SakuraApiConfig;
//# sourceMappingURL=sakura-api-config.js.map